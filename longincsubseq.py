class Solution(object):
    def lengthOfLIS(self, nums):
        if not nums: return 0
        L = [0]*len(nums)
        for i,v in enumerate(nums):
            if i > 0 and v == nums[i-1]: continue
            nl = [L[x] for x in range(i) if v>nums[x]]
            L[i] = 1
            if nl:
                L[i] = 1 + max(nl)
        return L[len(nums)-1]

    def lengthOfLIS1(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        ll = [[nums[0]]]
        lsf = nums[0]
        msf = 1
        for i in range(1, len(nums)):
            val = nums[i]
            if val == nums[i-1]: continue
            if val < lsf:
                lsf = val
                ll += [[val]]
                continue
            for l in ll[:]:
                if val < l[0]:
                    continue
                if val > l[-1]:
                    l += [val]
                    msf = max(msf, len(l))
                    continue
                for idx,v in enumerate(l):
                    if val > v:
                        continue
                    break;
                nl = l[:idx] + [val]
                msf = max(msf, idx+1)
                ll.append(nl)
                print ll," msf ", msf
        return msf

#print Solution().lengthOfLIS([10])
#print Solution().lengthOfLIS([1,2])
print Solution().lengthOfLIS([10, 9, 2, 5, 3, 7, 101, 18, 22])
print Solution().lengthOfLIS([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])
