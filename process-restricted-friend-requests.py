import sys
class UnionFind:
    def __init__(self):
        self.num_weights = {}
        self.parent_pointers = {}
        self.num_to_objects = {}
        self.objects_to_num = {}
        self.__repr__ = self.__str__
    def find(self, object):
        if not object in self.objects_to_num:
            obj_num = len(self.objects_to_num)
            self.num_weights[obj_num] = 1
            self.objects_to_num[object] = obj_num
            self.num_to_objects[obj_num] = object
            self.parent_pointers[obj_num] = obj_num
            return object
        stk = [self.objects_to_num[object]]
        par = self.parent_pointers[stk[-1]]
        while par != stk[-1]:
            stk.append(par)
            par = self.parent_pointers[par]
        for i in stk: self.parent_pointers[i] = par
        return self.num_to_objects[par]
    def union(self, object1, object2):
        o1p = self.find(object1)
        o2p = self.find(object2)
        if o1p != o2p:
            on1 = self.objects_to_num[o1p]
            on2 = self.objects_to_num[o2p]
            w1 = self.num_weights[on1]
            w2 = self.num_weights[on2]
            if w1 < w2:
                o1p, o2p, on1, on2, w1, w2 = o2p, o1p, on2, on1, w2, w1
            self.num_weights[on1] = w1+w2
            del self.num_weights[on2]
            self.parent_pointers[on2] = on1
    def getlist(self, obj):
        sets, o = [], self.find(obj)
        for i in self.objects_to_num:
            if self.find(i) == o: sets.append(i)
        return sets
    def get(self):
        sets = {}
        for i in range(len(self.objects_to_num)): sets[i] = []
        for i in self.objects_to_num: sets[self.objects_to_num[self.find(i)]].append(i)
        return [x for x in sets.values() if x]
class Solution:
    def friendRequests(self, n , restrictions, requests):
        g, uf, res = {i:set() for i in range(n)}, UnionFind(), []
        for i,j in restrictions:
            g[i].add(j), g[j].add(i)
        #for i in sorted(g): print(i, g[i])
        #sys.exit(0)
        c = 0
        for i,j in requests:
            x, y = uf.find(i), uf.find(j)
            if x == y: 
                res.append(True); continue
            if x in g and y in g[x]: 
                res.append(False); continue
            if y in g and x in g[y]: 
                res.append(False); continue
            uf.union(x,y)
            k = uf.find(i)
            g[x] = g[x].union(g[y])
            g[y] = g[x]
            res.append(True)
            print(c, (i,j), uf.get(), 'k',k, 'root', (x,y))
            print('     enemy list of root', k, (i,j), 'is ', g[uf.find(k)])
            c+=1
            
        return res


print(Solution().friendRequests(53,[[44,5],[51,50],[38,9],[38,31],[22,16],[39,42],[30,22],[19,26],[40,48],[45,31],[37,22],[16,28],[32,18],[31,34],[44,23],[5,52],[8,26],[13,27],[14,50],[24,37],[32,41],[47,34],[13,5],[36,26],[35,4],[43,0],[23,13],[20,44],[6,23],[9,32],[2,18],[1,50],[22,17],[27,0],[48,34],[20,38],[32,48],[3,9],[25,44],[47,29],[1,17],[29,26],[13,21],[10,23],[21,12],[41,50],[45,24],[46,11],[15,22],[49,45],[10,8],[1,42],[11,15],[10,45],[33,43],[14,1],[40,19],[35,15],[46,49],[14,38],[20,21],[33,35],[6,29],[20,31],[5,10],[26,51],[2,46],[37,3],[42,30],[10,52],[36,41],[50,48],[7,41],[9,28],[48,51],[43,31],[44,17],[43,35],[31,10],[43,22],[41,19],[29,5],[39,46],[15,13],[45,1],[10,43],[37,41],[25,9],[6,14],[52,41],[15,12],[52,21],[46,12],[40,24],[48,33],[1,24],[15,7],[37,36],[11,38],[21,31],[39,21],[40,46],[3,52],[36,17],[3,4],[50,37],[31,48],[34,41],[24,51],[44,9],[12,24],[46,18],[1,0],[50,42],[41,12],[44,7],[35,36],[20,45],[24,52],[24,19],[46,50],[36,34],[33,7],[2,24],[31,40],[20,5],[25,37],[52,22],[28,50],[52,16],[25,36],[44,40],[42,2],[51,21],[16,4],[7,27],[43,48],[6,50],[2,10],[2,34],[37,16],[7,49],[39,9],[0,28],[21,33],[5,18],[13,19],[33,39],[19,25],[13,16],[37,33],[14,11],[42,26],[17,2],[23,40],[18,15],[38,16],[47,12],[29,3],[46,13],[50,8],[15,5],[26,33],[16,12],[25,42],[48,36],[4,26],[20,52],[51,32],[13,42],[16,17],[16,24],[21,5],[40,49],[39,37],[25,43],[29,19],[42,43],[37,28],[12,26],[4,52],[8,44],[0,19],[51,16],[3,46],[35,23],[44,19],[15,39],[17,19],[38,50],[42,19],[44,46],[8,38],[10,26],[49,27],[47,18],[31,0],[37,7],[34,16],[21,1],[51,22],[48,9],[26,22],[42,29],[18,6],[36,38],[33,30],[5,22],[21,7],[26,37],[11,23],[13,8],[11,24],[40,3],[17,6],[12,14],[28,2],[33,31],[2,16],[5,36],[20,18],[14,36],[24,39],[36,44],[47,39],[41,29],[33,1],[7,5],[28,33],[16,39],[23,52],[19,35],[35,6],[29,18],[6,31],[51,38],[28,1],[37,13],[8,25],[19,46],[32,29],[15,9],[7,3],[0,37],[51,12],[19,12],[7,43],[52,19],[27,30],[12,9],[32,39],[49,9],[50,32],[12,32],[17,38],[39,19],[31,23],[32,46],[3,27],[29,34],[32,6],[25,46],[37,49],[5,39],[23,41],[2,1],[25,10],[44,15],[18,39],[42,12],[31,5],[27,22],[26,17],[26,1],[51,14],[20,36],[2,49],[6,36],[18,50],[48,4],[3,10],[40,18],[41,21],[7,30],[45,0],[33,17],[22,32],[31,3],[48,41],[1,6],[51,23],[15,48],[7,1],[5,34],[33,2],[45,17],[28,14],[31,22],[19,21],[40,30],[2,11],[35,21],[12,30],[8,5],[50,19],[36,18],[23,29],[39,41],[34,15],[35,34],[31,35],[6,47],[50,7],[45,33],[44,10],[11,47],[15,50],[29,4],[25,48],[22,48],[43,39],[35,26],[18,22],[18,4],[5,50],[51,30],[6,13],[42,8],[30,17],[43,4],[22,38],[25,23],[4,15],[27,31],[50,21],[11,13],[15,45],[10,12],[36,46],[35,12],[50,35],[30,20],[16,35],[33,6],[28,17],[20,8],[22,9],[41,43],[45,13],[49,38],[45,37],[41,26],[0,10],[28,38],[25,50],[13,0],[28,52],[6,21],[44,34],[18,24],[47,17],[27,26],[5,47],[8,47],[30,37],[3,38],[3,49],[34,43],[18,35],[14,34],[21,47],[38,40],[39,44],[32,0],[26,16],[50,43],[50,16],[29,11],[37,42],[27,52],[26,13],[11,39],[41,9],[38,48],[28,29],[30,32],[33,34],[40,37],[19,16],[11,40],[32,19],[16,43],[25,49],[5,11],[40,25],[10,19],[48,6],[29,20],[2,19],[27,17],[16,47],[20,27],[27,43],[7,0],[33,47],[25,38],[51,49],[24,26],[51,1],[17,25],[8,46],[47,20],[2,26],[36,39],[21,29],[38,4],[2,50],[24,31],[35,13],[5,28],[51,27],[42,44],[23,15],[8,27],[50,26],[29,37],[12,34],[52,6],[50,40],[51,39],[5,1],[24,48],[48,49],[20,46],[11,25],[10,33],[48,5],[15,10],[1,52],[14,33],[45,34],[6,44],[31,7],[17,29],[25,7],[9,34],[6,45],[52,49],[1,3],[38,34],[23,36],[45,14],[33,3],[14,13],[28,51],[32,33],[2,21],[18,9],[52,25],[12,27],[8,21],[6,2],[12,17],[33,4],[9,5],[37,51],[49,26],[38,24],[28,43],[32,4],[4,37],[22,7],[45,21],[45,8],[45,36],[49,41],[26,6],[33,5],[37,38],[13,41],[20,26],[35,3],[51,46],[49,6],[13,29],[15,38],[2,45],[8,6],[16,0],[17,35],[0,17],[50,44],[0,6],[40,8],[10,11],[3,26],[1,12],[37,8],[28,6],[4,20],[23,22],[44,4],[10,27],[24,23],[50,0],[14,3],[1,46],[18,3],[16,40],[23,2],[50,52],[25,32],[32,16],[14,9],[12,23],[13,36],[40,10],[27,36],[8,2],[45,50],[11,44],[8,19],[40,29],[27,42],[31,8],[0,22],[8,28],[48,23],[19,14],[0,15],[51,52],[11,7],[47,15],[47,0],[32,2],[12,29],[5,14],[32,36],[31,17],[40,51],[44,43],[44,35],[15,26],[39,34],[44,3],[42,9],[21,36],[22,39],[41,44],[50,39],[20,7],[41,40],[22,11],[33,44],[5,17],[52,31],[12,45],[49,43],[2,48],[43,24],[24,25],[40,15],[22,20],[19,36],[11,51],[46,17],[37,5],[28,45],[36,40],[0,30],[12,7],[23,19],[5,38],[21,43],[34,40],[43,40],[10,41],[14,22],[6,46],[48,29],[28,22],[46,29],[1,16],[18,27],[25,0],[47,3],[39,49],[4,28],[31,25],[44,22],[34,13],[38,46],[6,15],[19,18],[9,7],[49,10],[51,34],[50,36],[22,12],[6,12],[32,15],[20,25],[29,31],[36,9],[20,33],[36,0],[21,3],[7,26],[8,36],[33,51],[49,19],[36,42],[25,15],[43,52],[52,15],[11,18],[15,30],[40,52],[2,38],[19,51],[23,47],[20,43],[0,4],[28,47],[14,26],[1,44],[9,6],[46,52],[1,9],[17,40],[11,21],[31,15],[32,24],[32,47],[22,25],[14,41],[13,12],[40,33],[39,40],[46,37],[52,29],[15,3],[34,4],[49,30],[40,47],[26,44],[30,39],[3,12],[28,42],[39,20],[22,33],[14,29],[29,10],[43,37],[35,41]],
[[52,36],[2,13],[52,2]]))
